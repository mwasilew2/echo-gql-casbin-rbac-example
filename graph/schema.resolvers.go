package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/mwasilew2/echo-gqlgen-casbin-rbac-example/graph/model"
)

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input model.NewAccount) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: CreateAccount - createAccount"))
}

// CreateNamespace is the resolver for the createNamespace field.
func (r *mutationResolver) CreateNamespace(ctx context.Context, input model.NewNamespace) (*model.Namespace, error) {
	panic(fmt.Errorf("not implemented: CreateNamespace - createNamespace"))
}

// CreateStack is the resolver for the createStack field.
func (r *mutationResolver) CreateStack(ctx context.Context, input model.NewStack) (*model.Stack, error) {
	panic(fmt.Errorf("not implemented: CreateStack - createStack"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: Account - account"))
}

// Namespaces is the resolver for the namespaces field.
func (r *queryResolver) Namespaces(ctx context.Context) ([]*model.Namespace, error) {
	panic(fmt.Errorf("not implemented: Namespaces - namespaces"))
}

// Stacks is the resolver for the stacks field.
func (r *queryResolver) Stacks(ctx context.Context) ([]*model.Stack, error) {
	panic(fmt.Errorf("not implemented: Stacks - stacks"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
